---
import Layout from "../layouts/Layout.astro";
import { getCollection } from "astro:content";
import { Image } from "astro:assets";
import FormattedDate from "../components/FormattedDate.astro";

export type Post = {
  data: {
    pubDate?: Date;
    title: string;
    slug: string;
  };
};

const posts = (await getCollection("blog")).sort(
  (a, b) => (b.data.pubDate?.valueOf() ?? 0) - (a.data.pubDate?.valueOf() ?? 0)
);

function groupPostsByYear(posts: any) {
  return posts.reduce(
    (
      acc: { [x: string]: any[] },
      post: { data: { pubDate?: { getFullYear: () => any } } }
    ) => {
      const year = post.data.pubDate?.getFullYear();

      if (!acc[year]) {
        acc[year] = [] as Post[];
      }

      acc[year].push(post);
      return acc;
    },
    {}
  );
}

const postsByYear = groupPostsByYear(posts);
const sortedYears = Object.keys(postsByYear).sort(
  (a, b) => Number(b) - Number(a)
);

const delay = 10;
---

<Layout title="All Posts" description="Blog">
  <ul>
    {
      sortedYears.map((year) => (
        <li>
          <h2 class="flex items-center gap-x-2 align-middle year-title">
            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 text-[#B47B84]" fill="currentColor" class="bi bi-archive" viewBox="0 0 16 16">
              <path d="M0 2a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1v7.5a2.5 2.5 0 0 1-2.5 2.5h-9A2.5 2.5 0 0 1 1 12.5V5a1 1 0 0 1-1-1zm2 3v7.5A1.5 1.5 0 0 0 3.5 14h9a1.5 1.5 0 0 0 1.5-1.5V5zm13-3H1v2h14zM5 7.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5"/>
            </svg>

            {year}
          </h2>

          <ul class="posts-by-year">
            {postsByYear[year].map(
              (
                post: {
                  url: string;
                  data: { pubDate?: Date; title: string };
                  slug: string;
                },
                index: number
              ) => (
                <li
                  class="flex items-center space-x-2 align-middle slide-down"
                  style={`animation-delay: ${delay * index}ms`}
                >
                  {post.data.pubDate && (
                    <span class="meta post-date w-12">
                      <FormattedDate date={post.data.pubDate} />
                    </span>
                  )}

                  <a href={`/blog/${post.slug}/`}>{post.data.title}</a>
                </li>
              )
            )}
          </ul>
        </li>
      ))
    }
  </ul>
</Layout>
