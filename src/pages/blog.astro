---
import Layout from "../layouts/Layout.astro";
import { getCollection } from "astro:content";
import FormattedDate from "../components/FormattedDate.astro";
import Icon from "../components/Icon.astro";

export interface Post {
  data: {
    pubDate?: Date;
    title: string;
    slug: string;
  };
}

const posts = (await getCollection("blog")).toSorted(
  (a, b) => (b.data.pubDate?.valueOf() ?? 0) - (a.data.pubDate?.valueOf() ?? 0)
);

function groupPostsByYear(posts: any) {
  return posts.reduce(
    (
      acc: { [x: string]: any[] },
      post: { data: { pubDate?: { getFullYear: () => any } } }
    ) => {
      const year = post.data.pubDate?.getFullYear();

      if (!acc[year]) {
        acc[year] = [] as Post[];
      }

      acc[year].push(post);
      return acc;
    },
    {}
  );
}

const postsByYear = groupPostsByYear(posts);
const sortedYears = Object.keys(postsByYear).toSorted(
  (a, b) => Number(b) - Number(a)
);

const delay = 10;

function timeAgo(date: Date) {
  const now = new Date();
  const diff = now.getTime() - date.getTime();

  const seconds = Math.max(Math.floor(diff / 1000), 1);
  const minutes = Math.floor(seconds / 60);
  const hours = Math.floor(minutes / 60);
  const days = Math.floor(hours / 24);
  const months = Math.floor(days / 30);
  const years = Math.floor(days / 365);

  if (years >= 1) {
    return years === 1 ? "1 year ago" : `${years} years ago`;
  }

  if (months >= 1) {
    return months === 1 ? "1 month ago" : `${months} months ago`;
  }

  if (days >= 1) {
    return days === 1 ? "1 day ago" : `${days} days ago`;
  }

  if (hours >= 1) {
    return hours === 1 ? "1 hour ago" : `${hours} hours ago`;
  }

  if (minutes >= 1) {
    return minutes === 1 ? "1 minute ago" : `${minutes} minutes ago`;
  }

  return "Just now";
}
---

<Layout title="All Posts" description="Blog">
  <blockquote class="blog-archive__subscribe">
    <Icon name="rss" size={32} class="blog-archive__subscribe-icon" aria-hidden={true} />

    <span>Subscribe to <a href="/rss.xml">RSS</a>.</span>
  </blockquote>

  <div class="blog-archive">
    {
      sortedYears.map((year) => (
        <section class="blog-archive__year" aria-labelledby={`year-${year}`}>
          <h2 id={`year-${year}`} class="blog-archive__year-heading">
            <Icon name="archive" size={20} class="blog-archive__year-icon" aria-hidden={true} />

            {year}
          </h2>

          <div class="blog-archive__grid">
            {postsByYear[year].map(
              (
                post: {
                  url: string;
                  data: { pubDate?: Date; title: string; image?: string };
                  slug: string;
                },
                index: number
              ) => {
                const isoDate = post.data.pubDate?.toISOString();
                const imageSrc = post.data.image;
                const cardStyle = `--zen-card-stagger: ${delay * index}ms`;

                return (
                  <a
                    class="zen-card blog-card"
                    href={`/blog/${post.slug}/`}
                    style={cardStyle}
                    data-bg={imageSrc ?? ""}
                    data-prepared="false"
                  >
                    {isoDate && post.data.pubDate && (
                      <time class="blog-card__date" datetime={isoDate}>
                        <Icon name="calendar" size={14} class="blog-card__date-icon" aria-hidden={true} />
                        <FormattedDate date={post.data.pubDate} />
                        <span class="blog-card__date-relative">{timeAgo(post.data.pubDate)}</span>
                      </time>
                    )}

                    <h3 class="blog-card__title">{post.data.title}</h3>

                    <span class="blog-card__cta" aria-hidden={true}>
                      <Icon name="arrow-right" size={16} class="blog-card__cta-icon" />
                      <span class="blog-card__cta-text">Read more</span>
                    </span>
                  </a>
                );
              }
            )}
          </div>
        </section>
      ))
    }
  </div>

  <script type="module" is:inline>
    const revealZenCards = () => {
      const cards = document.querySelectorAll(
        '.zen-card[data-prepared="false"]'
      );

      if (cards.length === 0) {
        return;
      }

      const assignBackgroundAndReveal = (card) => {
        const bg = card.dataset.bg;
        if (bg) {
          card.style.setProperty('--zen-card-image', `url("${bg}")`);
          card.dataset.bg = '';
        }

        requestAnimationFrame(() => {
          requestAnimationFrame(() => {
            card.classList.add('zen-card--visible');
          });
        });
      };

      const prepareCard = (card) => {
        card.dataset.prepared = 'true';
        if (!card.style.getPropertyValue('--zen-card-image')) {
          card.style.setProperty('--zen-card-image', 'none');
        }
      };

      if ('IntersectionObserver' in window) {
        const observer = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                const card = entry.target;
                assignBackgroundAndReveal(card);
                observer.unobserve(card);
              }
            });
          },
          {
            rootMargin: '0px 0px -10% 0px',
            threshold: 0.25,
          }
        );

        cards.forEach((card) => {
          prepareCard(card);
          observer.observe(card);
        });
      } else {
        cards.forEach((card) => {
          prepareCard(card);
          assignBackgroundAndReveal(card);
        });
      }
    };

    if (typeof window !== 'undefined') {
      revealZenCards();
      document.addEventListener('astro:page-load', revealZenCards);
    }
  </script>
</Layout>
