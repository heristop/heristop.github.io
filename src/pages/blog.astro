---
import Layout from "../layouts/Layout.astro";
import { getCollection } from "astro:content";
import FormattedDate from "../components/FormattedDate.astro";

export type Post = {
  data: {
  pubDate?: Date;
  title: string;
  slug: string;
  };
};

const posts = (await getCollection("blog")).sort(
  (a, b) => (b.data.pubDate?.valueOf() ?? 0) - (a.data.pubDate?.valueOf() ?? 0)
);

function groupPostsByYear(posts: any) {
  return posts.reduce(
  (
    acc: { [x: string]: any[] },
    post: { data: { pubDate?: { getFullYear: () => any } } }
  ) => {
    const year = post.data.pubDate?.getFullYear();
    
    if (!acc[year]) {
        acc[year] = [] as Post[];
    }

    acc[year].push(post);
    return acc;
  },
  {}
  );
}

const postsByYear = groupPostsByYear(posts);
const sortedYears = Object.keys(postsByYear).sort(
  (a, b) => Number(b) - Number(a)
);
---

<Layout title="" description="Blog">
  <ul>
    {
    sortedYears.map((year) => (
      <li>
        <h2 class="flex items-center gap-x-2 align-middle year-title">
          <img
          class="year-icon"
          src="/images/layout_content.png"
          alt="Year Icon"
          width="16px"
          height="16px"
          />
          {year}
        </h2>

        <ul class="posts-by-year">
          {postsByYear[year].map(
            (post: {
              url: string;
              data: { pubDate?: Date; title: string };
              slug: string;
            }) => (
              <li class="flex items-center space-x-2 align-middle">
                  {post.data.pubDate && (
                    <span class="meta post-date text-sm w-12">
                      <FormattedDate date={post.data.pubDate} />
                    </span>
                  )}

                  <a href={`/blog/${post.slug}/`}>{post.data.title}</a>
              </li>
            )
          )}
        </ul>
      </li>
    )
  )}
  </ul>
</Layout>