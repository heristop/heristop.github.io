---
import HeaderLink from './HeaderLink.astro';
import Icon from './Icon.astro';
const { image } = Astro.props;
import { SITE_TITLE } from '../consts';

const bannerImage = image || '/images/zazen.png';

const title = `{ ${SITE_TITLE.replace(' ', '_')} }`;
---

<a href="#main-content" class="skip-link">Skip to main content</a>

<!-- Static Header with Banner -->
<header class="site-header-static">
  <div class="site-header__container">
    <div class="header__brand-section">
      <h1 class="site-header__title title">
        <a href="/" aria-label="Go to homepage">{title}</a>
      </h1>
    </div>

    <!-- Initial Navigation (visible immediately) -->
    <nav
      class="header__nav-initial"
      aria-label="Main navigation"
      role="navigation"
    >
      <div class="header__nav-links">
        <!-- Desktop Navigation -->
        <div
          class="header__nav header__nav--desktop"
          id="initial-nav"
          role="menubar"
        >
          <HeaderLink class="header__link" href="/" role="menuitem"
            >Home</HeaderLink
          >
          <HeaderLink class="header__link" href="/blog" role="menuitem"
            >Blog</HeaderLink
          >
          <HeaderLink class="header__link" href="/projects" role="menuitem"
            >Projects</HeaderLink
          >
          <HeaderLink class="header__link" href="/about" role="menuitem"
            >About</HeaderLink
          >
        </div>

        <!-- Search and Mobile Menu Actions -->
        <div class="header__actions">
          <!-- Search Button -->
          <button
            class="header__search-toggle"
            aria-label="Toggle search"
            aria-expanded="false"
            type="button"
          >
            <Icon name="search" size={20} aria-hidden={true} />
          </button>

          <!-- Mobile Menu Toggle -->
          <button
            class="header__mobile-toggle"
            aria-label="Toggle navigation menu"
            aria-expanded="false"
            aria-controls="initial-nav"
            type="button"
          >
            <span class="header__hamburger"></span>
            <span class="header__hamburger"></span>
            <span class="header__hamburger"></span>
          </button>
        </div>

        <!-- Mobile Navigation -->
        <div
          class="header__nav header__nav--mobile"
          id="initial-mobile-nav"
          role="menubar"
        >
          <HeaderLink
            class="header__link header__link--mobile"
            href="/"
            role="menuitem">Home</HeaderLink
          >
          <HeaderLink
            class="header__link header__link--mobile"
            href="/blog"
            role="menuitem">Blog</HeaderLink
          >
          <HeaderLink
            class="header__link header__link--mobile"
            href="/projects"
            role="menuitem">Projects</HeaderLink
          >
          <HeaderLink
            class="header__link header__link--mobile"
            href="/about"
            role="menuitem">About</HeaderLink
          >
        </div>
      </div>
    </nav>

    <figure class="banner site-header__banner" id="header-banner">
      <div class="site-header__banner-container">
        <picture class="site-header__banner-picture">
          <source
            srcset={bannerImage}
            type="image/png"
          />
          <img
            src={bannerImage}
            alt="Zen meditation scene with minimalist aesthetic, featuring serene natural elements that embody the contemplative spirit of zazen practice"
            class="site-header__banner-image"
            loading="eager"
            decoding="async"
            width="1200"
            height="400"
          />
        </picture>
        <div class="site-header__banner-overlay" aria-hidden="true"></div>
      </div>
    </figure>
  </div>
</header>

<!-- Sticky Navigation Bar -->
<nav
  class="site-header-nav"
  id="sticky-nav"
  aria-label="Main navigation"
  role="navigation"
>
  <div class="site-header-nav__container">
    <div class="header__nav-content">
      <div class="header__brand-mini">
        <a href="/" class="header__brand-link" aria-label="Go to homepage"
          >{SITE_TITLE}</a
        >
      </div>

      <!-- Desktop Navigation -->
      <div
        class="header__nav header__nav--desktop"
        id="header-nav"
        role="menubar"
      >
        <HeaderLink class="header__link" href="/" role="menuitem"
          >Home</HeaderLink
        >
        <HeaderLink class="header__link" href="/blog" role="menuitem"
          >Blog</HeaderLink
        >
        <HeaderLink class="header__link" href="/projects" role="menuitem"
          >Projects</HeaderLink
        >
        <HeaderLink class="header__link" href="/about" role="menuitem"
          >About</HeaderLink
        >
      </div>

      <!-- Search and Mobile Menu Actions -->
      <div class="header__actions">
        <!-- Search Button -->
        <button
          class="header__search-toggle"
          aria-label="Toggle search"
          aria-expanded="false"
          type="button"
        >
          <Icon name="search" size={20} aria-hidden={true} />
        </button>

        <!-- Mobile Menu Toggle -->
        <button
          class="header__mobile-toggle"
          aria-label="Toggle navigation menu"
          aria-expanded="false"
          aria-controls="header-nav"
          type="button"
        >
          <span class="header__hamburger"></span>
          <span class="header__hamburger"></span>
          <span class="header__hamburger"></span>
        </button>
      </div>
    </div>

    <!-- Mobile Navigation -->
    <div class="header__nav header__nav--mobile" id="mobile-nav" role="menubar">
      <HeaderLink
        class="header__link header__link--mobile"
        href="/"
        role="menuitem">Home</HeaderLink
      >
      <HeaderLink
        class="header__link header__link--mobile"
        href="/blog"
        role="menuitem">Blog</HeaderLink
      >
      <HeaderLink
        class="header__link header__link--mobile"
        href="/projects"
        role="menuitem">Projects</HeaderLink
      >
      <HeaderLink
        class="header__link header__link--mobile"
        href="/about"
        role="menuitem">About</HeaderLink
      >
    </div>

  </div>
</nav>

<script>
  const setupMobileMenu = (toggle: Element | null, nav: Element | null) => {
    if (!toggle || !nav) {return;}

    const toggleEl = toggle as HTMLElement;
    const navEl = nav as HTMLElement;

    if (toggleEl.dataset.menuInitialized === 'true') {return;}
    toggleEl.dataset.menuInitialized = 'true';

    toggleEl.addEventListener('click', () => {
      const isExpanded = toggleEl.getAttribute('aria-expanded') === 'true';

      toggleEl.setAttribute('aria-expanded', (!isExpanded).toString());
      toggleEl.classList.toggle('header__mobile-toggle--active');
      navEl.classList.toggle('header__nav--mobile-open');

      document.body.classList.toggle('mobile-menu-open', !isExpanded);
    });

    const mobileLinks = navEl.querySelectorAll('.header__link--mobile');
    mobileLinks.forEach(link => {
      const anchor = link as HTMLElement;
      if (anchor.dataset.menuLinkInitialized === 'true') {return;}
      anchor.dataset.menuLinkInitialized = 'true';

      anchor.addEventListener('click', () => {
        toggleEl.setAttribute('aria-expanded', 'false');
        toggleEl.classList.remove('header__mobile-toggle--active');
        navEl.classList.remove('header__nav--mobile-open');
        document.body.classList.remove('mobile-menu-open');
      });
    });
  };

  const initializeMobileMenus = () => {
    const initialMobileToggle = document.querySelector(
      '.header__nav-initial .header__mobile-toggle'
    );
    const initialMobileNav = document.querySelector('#initial-mobile-nav');
    const stickyMobileToggle = document.querySelector(
      '.site-header-nav .header__mobile-toggle'
    );
    const stickyMobileNav = document.querySelector('#mobile-nav');

    setupMobileMenu(initialMobileToggle, initialMobileNav);
    setupMobileMenu(stickyMobileToggle, stickyMobileNav);
  };

  const setupEscapeListener = () => {
    const existing = (window as any).__headerEscapeHandler as
      | ((event: KeyboardEvent) => void)
      | undefined;

    if (existing) {
      document.removeEventListener('keydown', existing);
    }

    const handler = (event: KeyboardEvent) => {
      if (event.key !== 'Escape') {return;}

      const openMenus = document.querySelectorAll(
        '.header__nav--mobile.header__nav--mobile-open'
      );

      openMenus.forEach(nav => {
        const toggle = nav
          .closest('.site-header-static, .site-header-nav')
          ?.querySelector('.header__mobile-toggle') as HTMLElement | null;

        if (toggle) {
          toggle.setAttribute('aria-expanded', 'false');
          toggle.classList.remove('header__mobile-toggle--active');
        }

        nav.classList.remove('header__nav--mobile-open');
      });

      if (openMenus.length > 0) {
        document.body.classList.remove('mobile-menu-open');
      }
    };

    document.addEventListener('keydown', handler);
    (window as any).__headerEscapeHandler = handler;
  };

  const initializeStickyNav = () => {
    const cleanup = (window as any).__headerStickyCleanup as
      | (() => void)
      | undefined;

    if (cleanup) {
      cleanup();
    }

    const stickyNav = document.querySelector('.site-header-nav') as
      | HTMLElement
      | null;
    const banner = document.querySelector('#header-banner') as
      | HTMLElement
      | null;

    if (!stickyNav || !banner) {
      (window as any).__headerStickyCleanup = undefined;
      return;
    }

    let isVisible = false;
    let resizeTimeout: ReturnType<typeof setTimeout>;
    let scrollObserver: IntersectionObserver | null;

    const isMobile = () => window.innerWidth <= 767;

    const updateNavVisibility = (progress: number) => {
      if (isMobile()) {
        stickyNav.style.setProperty('--nav-opacity', '1');
        stickyNav.style.setProperty('--nav-translate', '0%');
        stickyNav.style.setProperty('--nav-blur', '0px');

        if (!isVisible) {
          stickyNav.classList.add('site-header-nav--active');
          isVisible = true;
        }
        return;
      }

      // Progressive reveal based on banner scroll progress
      const opacity = Math.max(0, Math.min(1, 1 - progress));
      const translateY = Math.max(-100, Math.min(0, (progress - 0.7) * 333));
      const backdropBlur = Math.max(0, Math.min(20, (1 - progress) * 20));

      stickyNav.style.setProperty('--nav-opacity', opacity.toString());
      stickyNav.style.setProperty('--nav-translate', `${translateY}%`);
      stickyNav.style.setProperty('--nav-blur', `${backdropBlur}px`);

      if (opacity < 0.9 && !isVisible) {
        stickyNav.classList.add('site-header-nav--active');
        isVisible = true;
      } else if (opacity >= 0.9 && isVisible) {
        stickyNav.classList.remove('site-header-nav--active');
        isVisible = false;
      }
    };

    const initializeObserver = () => {
      // Clean up existing observer
      if (scrollObserver) {
        scrollObserver.disconnect();
      }

      // Create observer with multiple thresholds for smooth animation
      const thresholds = Array.from({ length: 21 }, (_, i) => i * 0.05);

      scrollObserver = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            const progress = 1 - entry.intersectionRatio;
            updateNavVisibility(progress);
          });
        },
        {
          root: undefined,
          rootMargin: '0px',
          threshold: thresholds
        }
      );

      scrollObserver.observe(banner);
    };

    const handleResize = () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(() => {
        // Reinitialize observer on resize for accuracy
        initializeObserver();
        updateNavVisibility(0);
      }, 100);
    };

    window.addEventListener('resize', handleResize);

    // Initialize the observer
    initializeObserver();

    (window as any).__headerStickyCleanup = () => {
      window.removeEventListener('resize', handleResize);
      if (scrollObserver) {
        scrollObserver.disconnect();
        scrollObserver = null;
      }
    };
  };

  const initializeSearch = () => {
    const searchToggles = document.querySelectorAll('.header__search-toggle') as NodeListOf<HTMLButtonElement>;
    const searchOverlay = document.querySelector('#search-overlay') as HTMLElement | null;
    const searchInput = document.querySelector('.search-input') as HTMLInputElement | null;
    const searchClose = document.querySelector('.search-close') as HTMLButtonElement | null;
    const searchResults = document.querySelector('#search-results') as HTMLElement | null;

    if (searchToggles.length === 0 || !searchOverlay || !searchInput || !searchClose || !searchResults) {return;}

    let blogPosts: any[] = [];
    let searchTimeout: ReturnType<typeof setTimeout>;

    // Fetch blog posts data
    const loadBlogPosts = async () => {
      try {
        const response = await fetch('/api/search-posts.json');
        if (response.ok) {
          blogPosts = await response.json();
        }
      } catch (error) {
        console.warn('Could not load blog posts for search:', error);
      }
    };

    const openSearch = () => {
      searchOverlay.setAttribute('aria-hidden', 'false');
      searchOverlay.removeAttribute('inert');
      searchOverlay.classList.add('search-overlay--open');
      searchToggles.forEach(toggle => toggle.setAttribute('aria-expanded', 'true'));

      // Update combobox state
      const inputWrapper = searchOverlay.querySelector('[role="combobox"]');
      if (inputWrapper) {
        inputWrapper.setAttribute('aria-expanded', 'true');
      }

      // Restore focusable elements
      const focusableElements = searchOverlay.querySelectorAll('input, button, [tabindex="-1"]');
      focusableElements.forEach(element => {
        element.removeAttribute('tabindex');
      });

      document.body.classList.add('search-open');

      // Focus input after animation
      setTimeout(() => searchInput.focus(), 150);
    };

    const closeSearch = () => {
      // Blur any focused elements inside search overlay first
      if (document.activeElement && searchOverlay.contains(document.activeElement)) {
        (document.activeElement as HTMLElement).blur();
      }

      searchOverlay.setAttribute('aria-hidden', 'true');
      searchOverlay.setAttribute('inert', '');
      searchOverlay.classList.remove('search-overlay--open');
      searchToggles.forEach(toggle => toggle.setAttribute('aria-expanded', 'false'));

      // Update combobox state
      const inputWrapper = searchOverlay.querySelector('[role="combobox"]');
      if (inputWrapper) {
        inputWrapper.setAttribute('aria-expanded', 'false');
      }

      // Make all focusable elements non-focusable
      const focusableElements = searchOverlay.querySelectorAll('input, button, [tabindex]');
      focusableElements.forEach(element => {
        element.setAttribute('tabindex', '-1');
      });

      document.body.classList.remove('search-open');
      searchInput.value = '';
      showEmptyState();
    };

    const showEmptyState = () => {
      searchResults.innerHTML = `
        <div class="search-results-content">
          <div class="search-empty">
<svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="search-empty-icon" aria-hidden="true">
              <circle cx="11" cy="11" r="8"/>
              <path d="m21 21-4.35-4.35"/>
            </svg>
            <p>Start typing to search reflections...</p>
          </div>
        </div>
      `;
    };

    const performSearch = (query: string) => {
      if (!query.trim()) {
        showEmptyState();
        return;
      }

      const results = blogPosts.filter(post =>
        post.title.toLowerCase().includes(query.toLowerCase()) ||
        (post.body && post.body.toLowerCase().includes(query.toLowerCase()))
      ).slice(0, 6);

      if (results.length === 0) {
        searchResults.innerHTML = `
          <div class="search-results-content">
            <div class="search-empty">
<svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="search-empty-icon" aria-hidden="true">
                <circle cx="11" cy="11" r="8"/>
                <path d="m21 21-4.35-4.35"/>
              </svg>
              <p>No reflections found for "${query}"</p>
            </div>
          </div>
        `;
        return;
      }

      // Helper function to escape HTML
      const escapeHtml = (text: string) => {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
      };

      // Helper function to format date like articles (10 Sept 2025)
      const formatDate = (date: string | Date) => {
        const postDate = new Date(date);
        const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];
        const day = postDate.getDate();
        const month = months[postDate.getMonth()];
        const year = postDate.getFullYear();
        return `${day} ${month} ${year}`;
      };

      searchResults.innerHTML = `
        <div class="search-results-content">
          ${results.map((post) => `
            <a
              href="/blog/${post.slug}/"
              class="search-result"
              tabindex="0"
              role="option"
              aria-label="Search result: ${escapeHtml(post.title)}"
            >
              <div class="search-result-content">
                <h3 class="search-result-title">${escapeHtml(post.title)}</h3>
                ${post.pubDate ? `<time class="search-result-date">${formatDate(post.pubDate)}</time>` : ''}
              </div>
            </a>
          `).join('')}
        </div>
      `;
    };

    // Event listeners
    searchToggles.forEach(toggle => toggle.addEventListener('click', openSearch));
    searchClose.addEventListener('click', closeSearch);

    searchInput.addEventListener('input', (e) => {
      clearTimeout(searchTimeout);
      const query = (e.target as HTMLInputElement).value;
      searchTimeout = setTimeout(() => performSearch(query), 150);
    });

    // Enhanced keyboard navigation and shortcuts
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && searchOverlay.classList.contains('search-overlay--open')) {
        closeSearch();
      }
      if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
        e.preventDefault();
        openSearch();
      }

      // Arrow key navigation for search results
      if (searchOverlay.classList.contains('search-overlay--open')) {
        const results = searchResults.querySelectorAll('.search-result');
        const currentFocus = document.activeElement as HTMLElement;
        let currentIndex = [...results].indexOf(currentFocus as any);

        if (e.key === 'ArrowDown') {
          e.preventDefault();
          currentIndex = Math.min(currentIndex + 1, results.length - 1);
          if (results[currentIndex]) {
            (results[currentIndex] as HTMLElement).focus();
          }
        }

        if (e.key === 'ArrowUp') {
          e.preventDefault();
          if (currentIndex <= 0) {
            searchInput.focus();
          } else {
            currentIndex = Math.max(currentIndex - 1, 0);
            if (results[currentIndex]) {
              (results[currentIndex] as HTMLElement).focus();
            }
          }
        }

        if (e.key === 'Enter' && currentFocus && currentFocus.classList.contains('header__search-result')) {
          e.preventDefault();
          currentFocus.click();
        }
      }
    });

    // Click outside to close
    searchOverlay.addEventListener('click', (e) => {
      if (e.target === searchOverlay) {
        closeSearch();
      }
    });

    // Load posts on initialization
    loadBlogPosts();
  };

  const initializeHeader = () => {
    const mobileNavs = document.querySelectorAll('.header__nav--mobile');
    mobileNavs.forEach(nav => nav.classList.remove('header__nav--mobile-open'));

    const toggles = document.querySelectorAll('.header__mobile-toggle');
    toggles.forEach(toggle => {
      const toggleEl = toggle as HTMLElement;
      toggleEl.classList.remove('header__mobile-toggle--active');
      toggleEl.setAttribute('aria-expanded', 'false');
    });

    initializeMobileMenus();
    setupEscapeListener();
    initializeStickyNav();
    initializeSearch();
    document.body.classList.remove('mobile-menu-open');
  };

  const updateParallax = () => {
    const bannerImage = document.querySelector('.site-header__banner-image') as HTMLElement;
    if (bannerImage) {
      const scrollY = window.scrollY;
      const limitedScrollY = Math.min(scrollY, 300);
      bannerImage.style.setProperty('--scroll-y', `${limitedScrollY}px`);
    }
  };

  const initializeParallax = () => {
    if (typeof window !== 'undefined') {
      window.addEventListener('scroll', updateParallax, { passive: true });
      updateParallax();
    }
  };

  document.addEventListener('DOMContentLoaded', () => {
    initializeHeader();
    initializeParallax();
  });
  document.addEventListener('astro:after-swap', () => {
    initializeHeader();
    initializeParallax();
  });
</script>
