---
import { LINKFOLIO_URL } from "../consts";
import { Image } from "astro:assets";

type NetworkIcon = { src?: string } | string | undefined;

type NetworkType = {
  title: string;
  description: string;
  url: string;
  group: string;
  iconSrc: NetworkIcon;
};

type UserConfig = {
  socialNetworks?: NetworkType[];
};

async function fetchUserConfig(): Promise<UserConfig> {
  try {
    const response = await fetch(`${LINKFOLIO_URL}/api/config`);

    if (!response.ok) {
      throw new Error(`Request failed with status ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    if (import.meta.env.DEV) {
      console.warn("Unable to load remote social networks:", error);
    }

    return { socialNetworks: [] };
  }
}

const { filter } = Astro.props;

const userConfig = await fetchUserConfig();
const networks = (userConfig.socialNetworks ?? []).filter(
  (network: NetworkType) => network.group === filter
);

const resolveIconSrc = (iconSrc: NetworkIcon) => {
  if (!iconSrc) {
    return "";
  }

  if (typeof iconSrc === "string") {
    return `${LINKFOLIO_URL}/${iconSrc}`;
  }

  if (iconSrc.src) {
    return `${LINKFOLIO_URL}/${iconSrc.src}`;
  }

  return "";
};

const delay = 100;

---

<section class="social-network">
  {
    networks.length > 0 ? (
      networks.map((network: NetworkType, index: number) => (
        <div
          class="social-network__card"
          style={`--social-card-stagger: ${delay * index}ms`}
          data-prepared="false"
        >
          <a href={network.url} target="_blank" class="social-network__link">
            <div class="social-network__image-shell">
              <Image
                src={resolveIconSrc(network.iconSrc)}
                alt={network.description}
                width={300}
                height={100}
                class="social-network__image"
                loading="lazy"
              />
            </div>

            <div class="social-network__content">
              <h3 class="social-network__title">{network.title}</h3>
              <p class="social-network__description">{network.description}</p>
            </div>
          </a>
        </div>
      ))
    ) : (
      <p class="social-network__empty">Currently meditating on new links. Please check back soon.</p>
    )
  }
</section>

{networks.length > 0 && (
  <script type="module" is:inline>
    const revealSocialCards = () => {
      const cards = document.querySelectorAll(
        '.social-network__card[data-prepared="false"]'
      );

      if (!cards.length) {
        return;
      }

      const reveal = (card) => {
        requestAnimationFrame(() => {
          card.classList.add('social-network__card--visible');
        });
      };

      const prepare = (card) => {
        card.dataset.prepared = 'true';
      };

      if ('IntersectionObserver' in window) {
        const observer = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                const card = entry.target;
                reveal(card);
                observer.unobserve(card);
              }
            });
          },
          {
            rootMargin: '0px 0px -15% 0px',
            threshold: 0.2,
          }
        );

        cards.forEach((card) => {
          prepare(card);
          observer.observe(card);
        });
      } else {
        cards.forEach((card) => {
          prepare(card);
          reveal(card);
        });
      }
    };

    if (typeof window !== 'undefined') {
      revealSocialCards();
      document.addEventListener('astro:page-load', revealSocialCards);
    }
  </script>
)}
