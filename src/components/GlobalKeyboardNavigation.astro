---
const currentPath = Astro.url.pathname;

// Main navigation pages in order
const navPages = [
  { path: '/', title: 'Home' },
  { path: '/blog/', title: 'Blog' },
  { path: '/projects/', title: 'Projects' },
  { path: '/about/', title: 'About' }
];

// Find current page index
const getCurrentPageIndex = (path: string) => {
  // Normalize paths for comparison
  const normalizedPath = path === '/' ? '/' : path.replace(/\/$/, '/');

  // Special handling for blog index
  if (path === '/blog' || path === '/blog/') {
    return navPages.findIndex(page => page.path === '/blog/');
  }

  return navPages.findIndex(page => page.path === normalizedPath);
};

const currentIndex = getCurrentPageIndex(currentPath);

// Calculate previous and next pages (cyclical)
const previousIndex = currentIndex > 0 ? currentIndex - 1 : navPages.length - 1;
const nextIndex = currentIndex < navPages.length - 1 ? currentIndex + 1 : 0;

const previousPage = currentIndex >= 0 ? navPages[previousIndex] : undefined;
const nextPage = currentIndex >= 0 ? navPages[nextIndex] : undefined;
---

<script type="module" is:inline define:vars={{ previousPage, nextPage, currentIndex }}>
  // Device detection (global scope)
  const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
  const isMobile = () => window.innerWidth <= 768;
  const isTablet = () => window.innerWidth > 768 && window.innerWidth <= 1024;
  const shouldUseTouchNavigation = () => isTouchDevice && (isMobile() || isTablet());

  function initGlobalKeyboardNavigation() {
    // Only enable if we're on a main navigation page
    if (currentIndex < 0) {return;}

    // Clean up any existing post navigation indicators from blog articles
    const existingPostNav = document.querySelector('.post-navigation-indicators');
    if (existingPostNav) {
      existingPostNav.remove();
    }

    // Also clean up any existing global navigation to prevent duplicates
    const existingGlobalNav = document.querySelector('.global-navigation-indicators');
    if (existingGlobalNav) {
      existingGlobalNav.remove();
    }

    let isInputFocused = false;

    function updateInputFocus() {
      const activeElement = document.activeElement;
      isInputFocused = activeElement && (
        activeElement.tagName === 'INPUT' ||
        activeElement.tagName === 'TEXTAREA' ||
        activeElement.tagName === 'SELECT' ||
        activeElement.contentEditable === 'true'
      );
    }

    // Listen for focus/blur on input elements
    document.addEventListener('focusin', updateInputFocus);
    document.addEventListener('focusout', updateInputFocus);

    // Unified navigation function
    function navigateToPage(direction) {
      const targetPage = direction === 'previous' ? previousPage : nextPage;
      if (targetPage) {
        showNavigationHint(direction, targetPage.title);
        setTimeout(() => {
          window.location.href = targetPage.path;
        }, 150);
      }
    }

    // Handle keyboard navigation (desktop only)
    if (!shouldUseTouchNavigation()) {
      document.addEventListener('keydown', (event) => {
        // Skip if input is focused or modifier keys are pressed
        if (isInputFocused || event.ctrlKey || event.metaKey || event.altKey || event.shiftKey) {
          return;
        }

        switch (event.key) {
          case 'ArrowLeft': {
            if (previousPage) {
              event.preventDefault();
              navigateToPage('previous');
            }
            break;
          }

          case 'ArrowRight': {
            if (nextPage) {
              event.preventDefault();
              navigateToPage('next');
            }
            break;
          }
        }
      });
    }

    // Handle touch navigation (mobile/tablet only)
    if (shouldUseTouchNavigation()) {
      let touchStartX = 0;
      let touchStartY = 0;
      let touchStartTime = 0;
      const swipeThreshold = 100; // Minimum distance for swipe
      const swipeTimeout = 500; // Maximum time for swipe
      const verticalThreshold = 50; // Maximum vertical movement

      document.addEventListener('touchstart', (event) => {
        if (isInputFocused) {return;}

        const touch = event.touches[0];
        touchStartX = touch.clientX;
        touchStartY = touch.clientY;
        touchStartTime = Date.now();
      }, { passive: true });

      document.addEventListener('touchend', (event) => {
        if (isInputFocused || !touchStartX) {return;}

        const touch = event.changedTouches[0];
        const touchEndX = touch.clientX;
        const touchEndY = touch.clientY;
        const touchEndTime = Date.now();

        const deltaX = touchEndX - touchStartX;
        const deltaY = Math.abs(touchEndY - touchStartY);
        const timeDelta = touchEndTime - touchStartTime;

        // Reset touch tracking
        touchStartX = 0;

        // Check if this qualifies as a horizontal swipe
        if (Math.abs(deltaX) > swipeThreshold &&
            deltaY < verticalThreshold &&
            timeDelta < swipeTimeout) {

          if (deltaX > 0 && previousPage) {
            // Swipe right = go to previous page
            event.preventDefault();
            navigateToPage('previous');
          } else if (deltaX < 0 && nextPage) {
            // Swipe left = go to next page
            event.preventDefault();
            navigateToPage('next');
          }
        }
      }, { passive: false });
    }

    // Show brief visual feedback for navigation
    function showNavigationHint(direction, pageTitle) {
      const hint = document.createElement('div');
      hint.className = `navigation-hint navigation-hint--${direction}`;
      hint.textContent = direction === 'previous' ? `← ${pageTitle}` : `${pageTitle} →`;
      hint.setAttribute('aria-live', 'polite');

      document.body.append(hint);

      requestAnimationFrame(() => {
        hint.style.opacity = '1';
        hint.style.transform = 'translateY(0)';
      });

      setTimeout(() => {
        hint.style.opacity = '0';
        hint.style.transform = 'translateY(-10px)';
        setTimeout(() => {
          if (hint.parentNode) {
            hint.parentNode.removeChild(hint);
          }
        }, 300);
      }, 1000);
    }

    // Add navigation indicators to page
    createGlobalNavigationIndicators();
  }

  function createGlobalNavigationIndicators() {
    // Check if indicators already exist to avoid duplicates
    if (document.querySelector('.global-navigation-indicators')) {
      return;
    }

    const indicators = document.createElement('div');
    indicators.className = 'global-navigation-indicators';
    indicators.setAttribute('role', 'region');
    indicators.setAttribute('aria-label', 'Page navigation');

    const indicatorHTML = [];

    if (previousPage) {
      indicatorHTML.push(`
        <button
          class="post-nav-indicator global-nav-indicator global-nav-indicator--left"
          title="Previous: ${previousPage.title}"
          aria-label="Previous page: ${previousPage.title}"
          onclick="window.location.href = '${previousPage.path}'"
        >←</button>
      `);
    }

    if (nextPage) {
      indicatorHTML.push(`
        <button
          class="post-nav-indicator global-nav-indicator global-nav-indicator--right"
          title="Next: ${nextPage.title}"
          aria-label="Next page: ${nextPage.title}"
          onclick="window.location.href = '${nextPage.path}'"
        >→</button>
      `);
    }

    if (previousPage || nextPage) {
      const hintText = shouldUseTouchNavigation()
        ? 'Swipe left/right to navigate pages'
        : 'Use ← → keys to navigate pages';

      indicatorHTML.push(`
        <span
          class="post-nav-hint global-nav-hint"
          role="status"
          aria-live="polite"
        >${hintText}</span>
      `);
    }

    indicators.innerHTML = indicatorHTML.join('');
    document.body.append(indicators);
  }

  // Clean up function to remove only global navigation indicators
  function cleanupGlobalNavigation() {
    const globalNav = document.querySelector('.global-navigation-indicators');
    if (globalNav) {globalNav.remove();}
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initGlobalKeyboardNavigation);
  } else {
    initGlobalKeyboardNavigation();
  }

  // Clean up and reinitialize on page navigation (for SPA-like behavior)
  document.addEventListener('astro:page-load', () => {
    // Only clean up if we're on a page that should have global navigation
    const isArticlePage = window.location.pathname.startsWith('/blog/') &&
                         window.location.pathname !== '/blog/' &&
                         window.location.pathname !== '/blog';
    const isExtraPage = window.location.pathname === '/extra/' || window.location.pathname === '/extra';

    if (!isArticlePage && !isExtraPage) {
      cleanupGlobalNavigation();
      setTimeout(initGlobalKeyboardNavigation, 100);
    }
  });
</script>